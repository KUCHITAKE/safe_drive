// This file was automatically generated by ros2msg_to_rs (https://github.com/tier4/ros2msg_to_rs).
use super::*;
use super::super::super::*;
use crate::msg::*;

extern "C" {
    fn shape_msgs__msg__Mesh__init(msg: *mut Mesh) -> bool;
    fn shape_msgs__msg__Mesh__fini(msg: *mut Mesh);
    fn shape_msgs__msg__Mesh__Sequence__init(msg: *mut MeshSequence, size: usize) -> bool;
    fn shape_msgs__msg__Mesh__Sequence__fini(msg: *mut MeshSequence);
}


#[repr(C)]
#[derive(Debug)]
pub struct Mesh {
    pub triangles: super::MeshTriangleSequence,
    pub vertices: geometry_msgs::msg::PointSequence,
}

impl Mesh {
    pub fn new() -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { shape_msgs__msg__Mesh__init(&mut msg) } {
            Some(msg)
        } else {
            None
        }
    }
}

impl Drop for Mesh {
    fn drop(&mut self) {
        unsafe { shape_msgs__msg__Mesh__fini(self) };
    }
}

#[repr(C)]
#[derive(Debug)]
pub struct MeshSequence {
    data: *mut Mesh,
    size: usize,
    capacity: usize,
}

impl MeshSequence {
    pub fn new(size: usize) -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { shape_msgs__msg__Mesh__Sequence__init(&mut msg, size) } {
            Some(msg)
        } else {
            None
        }
    }

    pub fn as_slice(&self) -> Option<&[Mesh]> {
        if self.data.is_null() {
            None
        } else {
            let s = unsafe { std::slice::from_raw_parts(self.data, self.size) };
            Some(s)
        }
    }

    pub fn as_slice_mut(&mut self) -> Option<&mut [Mesh]> {
        if self.data.is_null() {
            None
        } else {
            let s = unsafe { std::slice::from_raw_parts_mut(self.data, self.size) };
            Some(s)
        }
    }
}

impl Drop for MeshSequence {
    fn drop(&mut self) {
        unsafe { shape_msgs__msg__Mesh__Sequence__fini(self) };
    }
}

