// This file was automatically generated by ros2msg_to_rs (https://github.com/tier4/ros2msg_to_rs).
use super::*;
use super::super::super::*;
use crate::msg::*;

extern "C" {
    fn nav_msgs__msg__MapMetaData__init(msg: *mut MapMetaData) -> bool;
    fn nav_msgs__msg__MapMetaData__fini(msg: *mut MapMetaData);
    fn nav_msgs__msg__MapMetaData__Sequence__init(msg: *mut MapMetaDataSequence, size: usize) -> bool;
    fn nav_msgs__msg__MapMetaData__Sequence__fini(msg: *mut MapMetaDataSequence);
}


#[repr(C)]
#[derive(Debug)]
pub struct MapMetaData {
    pub map_load_time: builtin_interfaces__msg__Time,
    pub resolution: f32,
    pub width: u32,
    pub height: u32,
    pub origin: geometry_msgs::msg::Pose,
}

impl MapMetaData {
    pub fn new() -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { nav_msgs__msg__MapMetaData__init(&mut msg) } {
            Some(msg)
        } else {
            None
        }
    }
}

impl Drop for MapMetaData {
    fn drop(&mut self) {
        unsafe { nav_msgs__msg__MapMetaData__fini(self) };
    }
}

#[repr(C)]
#[derive(Debug)]
pub struct MapMetaDataSequence {
    data: *mut MapMetaData,
    size: usize,
    capacity: usize,
}

impl MapMetaDataSequence {
    pub fn new(size: usize) -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { nav_msgs__msg__MapMetaData__Sequence__init(&mut msg, size) } {
            Some(msg)
        } else {
            None
        }
    }

    pub fn as_slice(&self) -> Option<&[MapMetaData]> {
        if self.data.is_null() {
            None
        } else {
            let s = unsafe { std::slice::from_raw_parts(self.data, self.size) };
            Some(s)
        }
    }

    pub fn as_slice_mut(&mut self) -> Option<&mut [MapMetaData]> {
        if self.data.is_null() {
            None
        } else {
            let s = unsafe { std::slice::from_raw_parts_mut(self.data, self.size) };
            Some(s)
        }
    }
}

impl Drop for MapMetaDataSequence {
    fn drop(&mut self) {
        unsafe { nav_msgs__msg__MapMetaData__Sequence__fini(self) };
    }
}

