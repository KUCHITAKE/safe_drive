// This file was automatically generated by ros2msg_to_rs (https://github.com/tier4/ros2msg_to_rs).
use super::*;
use super::super::super::*;
use crate::msg::*;

extern "C" {
    fn std_msgs__msg__Float64__init(msg: *mut Float64) -> bool;
    fn std_msgs__msg__Float64__fini(msg: *mut Float64);
    fn std_msgs__msg__Float64__Sequence__init(msg: *mut Float64Sequence, size: usize) -> bool;
    fn std_msgs__msg__Float64__Sequence__fini(msg: *mut Float64Sequence);
}


#[repr(C)]
#[derive(Debug)]
pub struct Float64 {
    pub data: f64,
}

impl Float64 {
    pub fn new() -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { std_msgs__msg__Float64__init(&mut msg) } {
            Some(msg)
        } else {
            None
        }
    }
}

impl Drop for Float64 {
    fn drop(&mut self) {
        unsafe { std_msgs__msg__Float64__fini(self) };
    }
}

#[repr(C)]
#[derive(Debug)]
pub struct Float64Sequence {
    data: *mut Float64,
    size: usize,
    capacity: usize,
}

impl Float64Sequence {
    pub fn new(size: usize) -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { std_msgs__msg__Float64__Sequence__init(&mut msg, size) } {
            Some(msg)
        } else {
            None
        }
    }

    pub fn as_slice(&self) -> Option<&[Float64]> {
        if self.data.is_null() {
            None
        } else {
            let s = unsafe { std::slice::from_raw_parts(self.data, self.size) };
            Some(s)
        }
    }

    pub fn as_slice_mut(&mut self) -> Option<&mut [Float64]> {
        if self.data.is_null() {
            None
        } else {
            let s = unsafe { std::slice::from_raw_parts_mut(self.data, self.size) };
            Some(s)
        }
    }
}

impl Drop for Float64Sequence {
    fn drop(&mut self) {
        unsafe { std_msgs__msg__Float64__Sequence__fini(self) };
    }
}

