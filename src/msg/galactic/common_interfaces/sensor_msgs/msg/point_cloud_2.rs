// This file was automatically generated by ros2msg_to_rs (https://github.com/tier4/ros2msg_to_rs).
use super::*;
use super::super::super::*;
use crate::msg::*;
use crate::rcl;

extern "C" {
    fn sensor_msgs__msg__PointCloud2__init(msg: *mut PointCloud2) -> bool;
    fn sensor_msgs__msg__PointCloud2__fini(msg: *mut PointCloud2);
    fn sensor_msgs__msg__PointCloud2__Sequence__init(msg: *mut PointCloud2Sequence, size: usize) -> bool;
    fn sensor_msgs__msg__PointCloud2__Sequence__fini(msg: *mut PointCloud2Sequence);
    fn rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__PointCloud2() -> *const rcl::rosidl_message_type_support_t;
}


#[repr(C)]
#[derive(Debug)]
pub struct PointCloud2 {
    pub header: std_msgs::msg::Header,
    pub height: u32,
    pub width: u32,
    pub fields: PointFieldSequence,
    pub is_bigendian: bool,
    pub point_step: u32,
    pub row_step: u32,
    pub data: crate::msg::U8Seq<0>,
    pub is_dense: bool,
}

impl PointCloud2 {
    pub fn new() -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { sensor_msgs__msg__PointCloud2__init(&mut msg) } {
            Some(msg)
        } else {
            None
        }
    }
}

impl Drop for PointCloud2 {
    fn drop(&mut self) {
        unsafe { sensor_msgs__msg__PointCloud2__fini(self) };
    }
}

#[repr(C)]
#[derive(Debug)]
pub struct PointCloud2Sequence {
    data: *mut PointCloud2,
    size: usize,
    capacity: usize,
}

impl PointCloud2Sequence {
    pub fn new(size: usize) -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { sensor_msgs__msg__PointCloud2__Sequence__init(&mut msg, size) } {
            Some(msg)
        } else {
            None
        }
    }

    pub fn as_slice(&self) -> Option<&[PointCloud2]> {
        if self.data.is_null() {
            None
        } else {
            let s = unsafe { std::slice::from_raw_parts(self.data, self.size) };
            Some(s)
        }
    }

    pub fn as_slice_mut(&mut self) -> Option<&mut [PointCloud2]> {
        if self.data.is_null() {
            None
        } else {
            let s = unsafe { std::slice::from_raw_parts_mut(self.data, self.size) };
            Some(s)
        }
    }
}

impl Drop for PointCloud2Sequence {
    fn drop(&mut self) {
        unsafe { sensor_msgs__msg__PointCloud2__Sequence__fini(self) };
    }
}

impl TopicMsg for PointCloud2 {
    fn type_support() -> *const rcl::rosidl_message_type_support_t {
        unsafe {
            rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__PointCloud2()
        }
    }
}
