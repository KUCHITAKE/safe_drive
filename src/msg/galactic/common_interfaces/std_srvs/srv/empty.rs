// This file was automatically generated by ros2msg_to_rs (https://github.com/tier4/ros2msg_to_rs).
use super::super::*;
use super::super::super::*;
use crate::msg::*;
use crate::rcl;
use crate::msg::common_interfaces::*;

extern "C" {
    fn std_srvs__srv__Empty_Request__init(msg: *mut EmptyRequest) -> bool;
    fn std_srvs__srv__Empty_Request__fini(msg: *mut EmptyRequest);
    fn std_srvs__srv__Empty_Request__Sequence__init(msg: *mut EmptyRequestSequence, size: usize) -> bool;
    fn std_srvs__srv__Empty_Request__Sequence__fini(msg: *mut EmptyRequestSequence);
    fn std_srvs__srv__Empty_Response__init(msg: *mut EmptyResponse) -> bool;
    fn std_srvs__srv__Empty_Response__fini(msg: *mut EmptyResponse);
    fn std_srvs__srv__Empty_Response__Sequence__init(msg: *mut EmptyResponseSequence, size: usize) -> bool;
    fn std_srvs__srv__Empty_Response__Sequence__fini(msg: *mut EmptyResponseSequence);
    fn rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__Empty() -> *const rcl::rosidl_service_type_support_t;
}


#[repr(C)]
#[derive(Debug)]
pub struct EmptyRequest {
    _unused: u8
}

#[repr(C)]
#[derive(Debug)]
pub struct EmptyResponse {
    _unused: u8
}

impl EmptyRequest {
    pub fn new() -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { std_srvs__srv__Empty_Request__init(&mut msg) } {
            Some(msg)
        } else {
            None
        }
    }
}

impl Drop for EmptyRequest {
    fn drop(&mut self) {
        unsafe { std_srvs__srv__Empty_Request__fini(self) };
    }
}

#[repr(C)]
#[derive(Debug)]
pub struct EmptyRequestSequence {
    data: *mut EmptyRequest,
    size: usize,
    capacity: usize,
}

impl EmptyRequestSequence {
    pub fn new(size: usize) -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { std_srvs__srv__Empty_Request__Sequence__init(&mut msg, size) } {
            Some(msg)
        } else {
            None
        }
    }

    pub fn as_slice(&self) -> Option<&[EmptyRequest]> {
        if self.data.is_null() {
            None
        } else {
            let s = unsafe { std::slice::from_raw_parts(self.data, self.size) };
            Some(s)
        }
    }

    pub fn as_slice_mut(&mut self) -> Option<&mut [EmptyRequest]> {
        if self.data.is_null() {
            None
        } else {
            let s = unsafe { std::slice::from_raw_parts_mut(self.data, self.size) };
            Some(s)
        }
    }
}

impl Drop for EmptyRequestSequence {
    fn drop(&mut self) {
        unsafe { std_srvs__srv__Empty_Request__Sequence__fini(self) };
    }
}

impl EmptyResponse {
    pub fn new() -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { std_srvs__srv__Empty_Response__init(&mut msg) } {
            Some(msg)
        } else {
            None
        }
    }
}

impl Drop for EmptyResponse {
    fn drop(&mut self) {
        unsafe { std_srvs__srv__Empty_Response__fini(self) };
    }
}

#[repr(C)]
#[derive(Debug)]
pub struct EmptyResponseSequence {
    data: *mut EmptyResponse,
    size: usize,
    capacity: usize,
}

impl EmptyResponseSequence {
    pub fn new(size: usize) -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { std_srvs__srv__Empty_Response__Sequence__init(&mut msg, size) } {
            Some(msg)
        } else {
            None
        }
    }

    pub fn as_slice(&self) -> Option<&[EmptyResponse]> {
        if self.data.is_null() {
            None
        } else {
            let s = unsafe { std::slice::from_raw_parts(self.data, self.size) };
            Some(s)
        }
    }

    pub fn as_slice_mut(&mut self) -> Option<&mut [EmptyResponse]> {
        if self.data.is_null() {
            None
        } else {
            let s = unsafe { std::slice::from_raw_parts_mut(self.data, self.size) };
            Some(s)
        }
    }
}

impl Drop for EmptyResponseSequence {
    fn drop(&mut self) {
        unsafe { std_srvs__srv__Empty_Response__Sequence__fini(self) };
    }
}

pub struct Empty;

impl ServiceMsg for Empty {
    type Request = EmptyRequest;
    type Response = EmptyResponse;
    fn type_support() -> *const rcl::rosidl_service_type_support_t {
        unsafe {
            rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__Empty()
        }
    }
}

