// This file was automatically generated by ros2msg_to_rs (https://github.com/tier4/ros2msg_to_rs).
use super::super::*;
use super::super::super::*;
use crate::msg::*;
use crate::rcl;
use crate::msg::common_interfaces::*;

extern "C" {
    fn std_srvs__srv__SetBool_Request__init(msg: *mut SetBoolRequest) -> bool;
    fn std_srvs__srv__SetBool_Request__fini(msg: *mut SetBoolRequest);
    fn std_srvs__srv__SetBool_Request__Sequence__init(msg: *mut SetBoolRequestSequence, size: usize) -> bool;
    fn std_srvs__srv__SetBool_Request__Sequence__fini(msg: *mut SetBoolRequestSequence);
    fn std_srvs__srv__SetBool_Response__init(msg: *mut SetBoolResponse) -> bool;
    fn std_srvs__srv__SetBool_Response__fini(msg: *mut SetBoolResponse);
    fn std_srvs__srv__SetBool_Response__Sequence__init(msg: *mut SetBoolResponseSequence, size: usize) -> bool;
    fn std_srvs__srv__SetBool_Response__Sequence__fini(msg: *mut SetBoolResponseSequence);
    fn rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool() -> *const rcl::rosidl_service_type_support_t;
}


#[repr(C)]
#[derive(Debug)]
pub struct SetBoolRequest {
    pub data: bool,
}

#[repr(C)]
#[derive(Debug)]
pub struct SetBoolResponse {
    pub success: bool,
    pub message: crate::msg::RosString<0>,
}

impl SetBoolRequest {
    pub fn new() -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { std_srvs__srv__SetBool_Request__init(&mut msg) } {
            Some(msg)
        } else {
            None
        }
    }
}

impl Drop for SetBoolRequest {
    fn drop(&mut self) {
        unsafe { std_srvs__srv__SetBool_Request__fini(self) };
    }
}

#[repr(C)]
#[derive(Debug)]
pub struct SetBoolRequestSequence {
    data: *mut SetBoolRequest,
    size: usize,
    capacity: usize,
}

impl SetBoolRequestSequence {
    pub fn new(size: usize) -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { std_srvs__srv__SetBool_Request__Sequence__init(&mut msg, size) } {
            Some(msg)
        } else {
            None
        }
    }

    pub fn as_slice(&self) -> Option<&[SetBoolRequest]> {
        if self.data.is_null() {
            None
        } else {
            let s = unsafe { std::slice::from_raw_parts(self.data, self.size) };
            Some(s)
        }
    }

    pub fn as_slice_mut(&mut self) -> Option<&mut [SetBoolRequest]> {
        if self.data.is_null() {
            None
        } else {
            let s = unsafe { std::slice::from_raw_parts_mut(self.data, self.size) };
            Some(s)
        }
    }
}

impl Drop for SetBoolRequestSequence {
    fn drop(&mut self) {
        unsafe { std_srvs__srv__SetBool_Request__Sequence__fini(self) };
    }
}

unsafe impl Send for SetBoolRequestSequence {}
unsafe impl Sync for SetBoolRequestSequence {}


impl SetBoolResponse {
    pub fn new() -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { std_srvs__srv__SetBool_Response__init(&mut msg) } {
            Some(msg)
        } else {
            None
        }
    }
}

impl Drop for SetBoolResponse {
    fn drop(&mut self) {
        unsafe { std_srvs__srv__SetBool_Response__fini(self) };
    }
}

#[repr(C)]
#[derive(Debug)]
pub struct SetBoolResponseSequence {
    data: *mut SetBoolResponse,
    size: usize,
    capacity: usize,
}

impl SetBoolResponseSequence {
    pub fn new(size: usize) -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { std_srvs__srv__SetBool_Response__Sequence__init(&mut msg, size) } {
            Some(msg)
        } else {
            None
        }
    }

    pub fn as_slice(&self) -> Option<&[SetBoolResponse]> {
        if self.data.is_null() {
            None
        } else {
            let s = unsafe { std::slice::from_raw_parts(self.data, self.size) };
            Some(s)
        }
    }

    pub fn as_slice_mut(&mut self) -> Option<&mut [SetBoolResponse]> {
        if self.data.is_null() {
            None
        } else {
            let s = unsafe { std::slice::from_raw_parts_mut(self.data, self.size) };
            Some(s)
        }
    }
}

impl Drop for SetBoolResponseSequence {
    fn drop(&mut self) {
        unsafe { std_srvs__srv__SetBool_Response__Sequence__fini(self) };
    }
}

unsafe impl Send for SetBoolResponseSequence {}
unsafe impl Sync for SetBoolResponseSequence {}


pub struct SetBool;

impl ServiceMsg for SetBool {
    type Request = SetBoolRequest;
    type Response = SetBoolResponse;
    fn type_support() -> *const rcl::rosidl_service_type_support_t {
        unsafe {
            rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool()
        }
    }
}

