// This file was automatically generated by ros2msg_to_rs (https://github.com/tier4/ros2msg_to_rs).
use super::*;
use super::super::super::*;
use crate::msg::*;
use crate::rcl;

extern "C" {
    fn std_msgs__msg__Empty__init(msg: *mut Empty) -> bool;
    fn std_msgs__msg__Empty__fini(msg: *mut Empty);
    fn std_msgs__msg__Empty__Sequence__init(msg: *mut EmptySequence, size: usize) -> bool;
    fn std_msgs__msg__Empty__Sequence__fini(msg: *mut EmptySequence);
    fn rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Empty() -> *const rcl::rosidl_message_type_support_t;
}


#[repr(C)]
#[derive(Debug)]
pub struct Empty {
    _unused: u8
}

impl Empty {
    pub fn new() -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { std_msgs__msg__Empty__init(&mut msg) } {
            Some(msg)
        } else {
            None
        }
    }
}

impl Drop for Empty {
    fn drop(&mut self) {
        unsafe { std_msgs__msg__Empty__fini(self) };
    }
}

#[repr(C)]
#[derive(Debug)]
pub struct EmptySequence {
    data: *mut Empty,
    size: usize,
    capacity: usize,
}

impl EmptySequence {
    pub fn new(size: usize) -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { std_msgs__msg__Empty__Sequence__init(&mut msg, size) } {
            Some(msg)
        } else {
            None
        }
    }

    pub fn as_slice(&self) -> Option<&[Empty]> {
        if self.data.is_null() {
            None
        } else {
            let s = unsafe { std::slice::from_raw_parts(self.data, self.size) };
            Some(s)
        }
    }

    pub fn as_slice_mut(&mut self) -> Option<&mut [Empty]> {
        if self.data.is_null() {
            None
        } else {
            let s = unsafe { std::slice::from_raw_parts_mut(self.data, self.size) };
            Some(s)
        }
    }
}

impl Drop for EmptySequence {
    fn drop(&mut self) {
        unsafe { std_msgs__msg__Empty__Sequence__fini(self) };
    }
}

impl TopicMsg for Empty {
    fn type_support() -> *const rcl::rosidl_message_type_support_t {
        unsafe {
            rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Empty()
        }
    }
}
