// This file was automatically generated by ros2msg_to_rs (https://github.com/tier4/ros2msg_to_rs).
use super::super::*;
use super::super::super::*;
use crate::msg::*;
use crate::rcl;
use crate::msg::common_interfaces::*;

extern "C" {
    fn nav_msgs__srv__GetPlan_Request__init(msg: *mut GetPlanRequest) -> bool;
    fn nav_msgs__srv__GetPlan_Request__fini(msg: *mut GetPlanRequest);
    fn nav_msgs__srv__GetPlan_Request__Sequence__init(msg: *mut GetPlanRequestSequence, size: usize) -> bool;
    fn nav_msgs__srv__GetPlan_Request__Sequence__fini(msg: *mut GetPlanRequestSequence);
    fn nav_msgs__srv__GetPlan_Response__init(msg: *mut GetPlanResponse) -> bool;
    fn nav_msgs__srv__GetPlan_Response__fini(msg: *mut GetPlanResponse);
    fn nav_msgs__srv__GetPlan_Response__Sequence__init(msg: *mut GetPlanResponseSequence, size: usize) -> bool;
    fn nav_msgs__srv__GetPlan_Response__Sequence__fini(msg: *mut GetPlanResponseSequence);
    fn rosidl_typesupport_c__get_service_type_support_handle__nav_msgs__srv__GetPlan() -> *const rcl::rosidl_service_type_support_t;
}


#[repr(C)]
#[derive(Debug)]
pub struct GetPlanRequest {
    pub start: geometry_msgs::msg::PoseStamped,
    pub goal: geometry_msgs::msg::PoseStamped,
    pub tolerance: f32,
}

#[repr(C)]
#[derive(Debug)]
pub struct GetPlanResponse {
    pub plan: Path,
}

impl GetPlanRequest {
    pub fn new() -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { nav_msgs__srv__GetPlan_Request__init(&mut msg) } {
            Some(msg)
        } else {
            None
        }
    }
}

impl Drop for GetPlanRequest {
    fn drop(&mut self) {
        unsafe { nav_msgs__srv__GetPlan_Request__fini(self) };
    }
}

#[repr(C)]
#[derive(Debug)]
pub struct GetPlanRequestSequence {
    data: *mut GetPlanRequest,
    size: usize,
    capacity: usize,
}

impl GetPlanRequestSequence {
    pub fn new(size: usize) -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { nav_msgs__srv__GetPlan_Request__Sequence__init(&mut msg, size) } {
            Some(msg)
        } else {
            None
        }
    }

    pub fn as_slice(&self) -> Option<&[GetPlanRequest]> {
        if self.data.is_null() {
            None
        } else {
            let s = unsafe { std::slice::from_raw_parts(self.data, self.size) };
            Some(s)
        }
    }

    pub fn as_slice_mut(&mut self) -> Option<&mut [GetPlanRequest]> {
        if self.data.is_null() {
            None
        } else {
            let s = unsafe { std::slice::from_raw_parts_mut(self.data, self.size) };
            Some(s)
        }
    }
}

impl Drop for GetPlanRequestSequence {
    fn drop(&mut self) {
        unsafe { nav_msgs__srv__GetPlan_Request__Sequence__fini(self) };
    }
}

unsafe impl Send for GetPlanRequestSequence {}
unsafe impl Sync for GetPlanRequestSequence {}


impl GetPlanResponse {
    pub fn new() -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { nav_msgs__srv__GetPlan_Response__init(&mut msg) } {
            Some(msg)
        } else {
            None
        }
    }
}

impl Drop for GetPlanResponse {
    fn drop(&mut self) {
        unsafe { nav_msgs__srv__GetPlan_Response__fini(self) };
    }
}

#[repr(C)]
#[derive(Debug)]
pub struct GetPlanResponseSequence {
    data: *mut GetPlanResponse,
    size: usize,
    capacity: usize,
}

impl GetPlanResponseSequence {
    pub fn new(size: usize) -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { nav_msgs__srv__GetPlan_Response__Sequence__init(&mut msg, size) } {
            Some(msg)
        } else {
            None
        }
    }

    pub fn as_slice(&self) -> Option<&[GetPlanResponse]> {
        if self.data.is_null() {
            None
        } else {
            let s = unsafe { std::slice::from_raw_parts(self.data, self.size) };
            Some(s)
        }
    }

    pub fn as_slice_mut(&mut self) -> Option<&mut [GetPlanResponse]> {
        if self.data.is_null() {
            None
        } else {
            let s = unsafe { std::slice::from_raw_parts_mut(self.data, self.size) };
            Some(s)
        }
    }
}

impl Drop for GetPlanResponseSequence {
    fn drop(&mut self) {
        unsafe { nav_msgs__srv__GetPlan_Response__Sequence__fini(self) };
    }
}

unsafe impl Send for GetPlanResponseSequence {}
unsafe impl Sync for GetPlanResponseSequence {}


pub struct GetPlan;

impl ServiceMsg for GetPlan {
    type Request = GetPlanRequest;
    type Response = GetPlanResponse;
    fn type_support() -> *const rcl::rosidl_service_type_support_t {
        unsafe {
            rosidl_typesupport_c__get_service_type_support_handle__nav_msgs__srv__GetPlan()
        }
    }
}

