// This file was automatically generated by ros2msg_to_rs (https://github.com/tier4/ros2msg_to_rs).
use super::*;
use super::super::super::*;
use crate::msg::*;
use crate::rcl;
pub const PENDING: u8 = 0; // The goal has yet to be processed by the action server.
pub const ACTIVE: u8 = 1; // The goal is currently being processed by the action server.
pub const PREEMPTED: u8 = 2; // The goal received a cancel request after it started executing
pub const SUCCEEDED: u8 = 3; // The goal was achieved successfully by the action server
pub const ABORTED: u8 = 4; // The goal was aborted during execution by the action server due
pub const REJECTED: u8 = 5; // The goal was rejected by the action server without being processed,
pub const PREEMPTING: u8 = 6; // The goal received a cancel request after it started executing
pub const RECALLING: u8 = 7; // The goal received a cancel request before it started executing, but
pub const RECALLED: u8 = 8; // The goal received a cancel request before it started executing
pub const LOST: u8 = 9; // An action client can determine that a goal is LOST. This should not

extern "C" {
    fn actionlib_msgs__msg__GoalStatus__init(msg: *mut GoalStatus) -> bool;
    fn actionlib_msgs__msg__GoalStatus__fini(msg: *mut GoalStatus);
    fn actionlib_msgs__msg__GoalStatus__Sequence__init(msg: *mut GoalStatusSequence, size: usize) -> bool;
    fn actionlib_msgs__msg__GoalStatus__Sequence__fini(msg: *mut GoalStatusSequence);
    fn rosidl_typesupport_c__get_message_type_support_handle__actionlib_msgs__msg__GoalStatus() -> *const rcl::rosidl_message_type_support_t;
}


#[repr(C)]
#[derive(Debug)]
pub struct GoalStatus {
    pub goal_id: GoalID,
    pub status: u8,
    pub text: crate::msg::RosString<0>,
}

impl GoalStatus {
    pub fn new() -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { actionlib_msgs__msg__GoalStatus__init(&mut msg) } {
            Some(msg)
        } else {
            None
        }
    }
}

impl Drop for GoalStatus {
    fn drop(&mut self) {
        unsafe { actionlib_msgs__msg__GoalStatus__fini(self) };
    }
}

#[repr(C)]
#[derive(Debug)]
pub struct GoalStatusSequence {
    data: *mut GoalStatus,
    size: usize,
    capacity: usize,
}

impl GoalStatusSequence {
    pub fn new(size: usize) -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { actionlib_msgs__msg__GoalStatus__Sequence__init(&mut msg, size) } {
            Some(msg)
        } else {
            None
        }
    }

    pub fn as_slice(&self) -> Option<&[GoalStatus]> {
        if self.data.is_null() {
            None
        } else {
            let s = unsafe { std::slice::from_raw_parts(self.data, self.size) };
            Some(s)
        }
    }

    pub fn as_slice_mut(&mut self) -> Option<&mut [GoalStatus]> {
        if self.data.is_null() {
            None
        } else {
            let s = unsafe { std::slice::from_raw_parts_mut(self.data, self.size) };
            Some(s)
        }
    }
}

impl Drop for GoalStatusSequence {
    fn drop(&mut self) {
        unsafe { actionlib_msgs__msg__GoalStatus__Sequence__fini(self) };
    }
}

impl TopicMsg for GoalStatus {
    fn type_support() -> *const rcl::rosidl_message_type_support_t {
        unsafe {
            rosidl_typesupport_c__get_message_type_support_handle__actionlib_msgs__msg__GoalStatus()
        }
    }
}
