// This file was automatically generated by ros2msg_to_rs (https://github.com/tier4/ros2msg_to_rs).
use super::*;
use super::super::super::*;
use crate::msg::*;
use crate::rcl;

extern "C" {
    fn geometry_msgs__msg__Inertia__init(msg: *mut Inertia) -> bool;
    fn geometry_msgs__msg__Inertia__fini(msg: *mut Inertia);
    fn geometry_msgs__msg__Inertia__Sequence__init(msg: *mut InertiaSequence, size: usize) -> bool;
    fn geometry_msgs__msg__Inertia__Sequence__fini(msg: *mut InertiaSequence);
    fn rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Inertia() -> *const rcl::rosidl_message_type_support_t;
}


#[repr(C)]
#[derive(Debug)]
pub struct Inertia {
    pub m: f64,
    pub com: Vector3,
    pub ixx: f64,
    pub ixy: f64,
    pub ixz: f64,
    pub iyy: f64,
    pub iyz: f64,
    pub izz: f64,
}

impl Inertia {
    pub fn new() -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { geometry_msgs__msg__Inertia__init(&mut msg) } {
            Some(msg)
        } else {
            None
        }
    }
}

impl Drop for Inertia {
    fn drop(&mut self) {
        unsafe { geometry_msgs__msg__Inertia__fini(self) };
    }
}

#[repr(C)]
#[derive(Debug)]
pub struct InertiaSequence {
    data: *mut Inertia,
    size: usize,
    capacity: usize,
}

impl InertiaSequence {
    pub fn new(size: usize) -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { geometry_msgs__msg__Inertia__Sequence__init(&mut msg, size) } {
            Some(msg)
        } else {
            None
        }
    }

    pub fn as_slice(&self) -> Option<&[Inertia]> {
        if self.data.is_null() {
            None
        } else {
            let s = unsafe { std::slice::from_raw_parts(self.data, self.size) };
            Some(s)
        }
    }

    pub fn as_slice_mut(&mut self) -> Option<&mut [Inertia]> {
        if self.data.is_null() {
            None
        } else {
            let s = unsafe { std::slice::from_raw_parts_mut(self.data, self.size) };
            Some(s)
        }
    }
}

impl Drop for InertiaSequence {
    fn drop(&mut self) {
        unsafe { geometry_msgs__msg__Inertia__Sequence__fini(self) };
    }
}

impl TopicMsg for Inertia {
    fn type_support() -> *const rcl::rosidl_message_type_support_t {
        unsafe {
            rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Inertia()
        }
    }
}
