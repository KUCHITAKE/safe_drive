// This file was automatically generated by ros2msg_to_rs (https://github.com/tier4/ros2msg_to_rs).
use super::super::*;
use super::super::super::*;
use crate::msg::*;
use crate::rcl;
use crate::msg::common_interfaces::*;

extern "C" {
    fn diagnostic_msgs__srv__SelfTest_Request__init(msg: *mut SelfTestRequest) -> bool;
    fn diagnostic_msgs__srv__SelfTest_Request__fini(msg: *mut SelfTestRequest);
    fn diagnostic_msgs__srv__SelfTest_Request__Sequence__init(msg: *mut SelfTestRequestSequence, size: usize) -> bool;
    fn diagnostic_msgs__srv__SelfTest_Request__Sequence__fini(msg: *mut SelfTestRequestSequence);
    fn diagnostic_msgs__srv__SelfTest_Response__init(msg: *mut SelfTestResponse) -> bool;
    fn diagnostic_msgs__srv__SelfTest_Response__fini(msg: *mut SelfTestResponse);
    fn diagnostic_msgs__srv__SelfTest_Response__Sequence__init(msg: *mut SelfTestResponseSequence, size: usize) -> bool;
    fn diagnostic_msgs__srv__SelfTest_Response__Sequence__fini(msg: *mut SelfTestResponseSequence);
    fn rosidl_typesupport_c__get_service_type_support_handle__diagnostic_msgs__srv__SelfTest() -> *const rcl::rosidl_service_type_support_t;
}


#[repr(C)]
#[derive(Debug)]
pub struct SelfTestRequest {
    _unused: u8
}

#[repr(C)]
#[derive(Debug)]
pub struct SelfTestResponse {
    pub id: crate::msg::RosString<0>,
    pub passed: u8,
    pub status: DiagnosticStatusSequence,
}

impl SelfTestRequest {
    pub fn new() -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { diagnostic_msgs__srv__SelfTest_Request__init(&mut msg) } {
            Some(msg)
        } else {
            None
        }
    }
}

impl Drop for SelfTestRequest {
    fn drop(&mut self) {
        unsafe { diagnostic_msgs__srv__SelfTest_Request__fini(self) };
    }
}

#[repr(C)]
#[derive(Debug)]
pub struct SelfTestRequestSequence {
    data: *mut SelfTestRequest,
    size: usize,
    capacity: usize,
}

impl SelfTestRequestSequence {
    pub fn new(size: usize) -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { diagnostic_msgs__srv__SelfTest_Request__Sequence__init(&mut msg, size) } {
            Some(msg)
        } else {
            None
        }
    }

    pub fn as_slice(&self) -> Option<&[SelfTestRequest]> {
        if self.data.is_null() {
            None
        } else {
            let s = unsafe { std::slice::from_raw_parts(self.data, self.size) };
            Some(s)
        }
    }

    pub fn as_slice_mut(&mut self) -> Option<&mut [SelfTestRequest]> {
        if self.data.is_null() {
            None
        } else {
            let s = unsafe { std::slice::from_raw_parts_mut(self.data, self.size) };
            Some(s)
        }
    }
}

impl Drop for SelfTestRequestSequence {
    fn drop(&mut self) {
        unsafe { diagnostic_msgs__srv__SelfTest_Request__Sequence__fini(self) };
    }
}

unsafe impl Send for SelfTestRequestSequence {}
unsafe impl Sync for SelfTestRequestSequence {}


impl SelfTestResponse {
    pub fn new() -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { diagnostic_msgs__srv__SelfTest_Response__init(&mut msg) } {
            Some(msg)
        } else {
            None
        }
    }
}

impl Drop for SelfTestResponse {
    fn drop(&mut self) {
        unsafe { diagnostic_msgs__srv__SelfTest_Response__fini(self) };
    }
}

#[repr(C)]
#[derive(Debug)]
pub struct SelfTestResponseSequence {
    data: *mut SelfTestResponse,
    size: usize,
    capacity: usize,
}

impl SelfTestResponseSequence {
    pub fn new(size: usize) -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { diagnostic_msgs__srv__SelfTest_Response__Sequence__init(&mut msg, size) } {
            Some(msg)
        } else {
            None
        }
    }

    pub fn as_slice(&self) -> Option<&[SelfTestResponse]> {
        if self.data.is_null() {
            None
        } else {
            let s = unsafe { std::slice::from_raw_parts(self.data, self.size) };
            Some(s)
        }
    }

    pub fn as_slice_mut(&mut self) -> Option<&mut [SelfTestResponse]> {
        if self.data.is_null() {
            None
        } else {
            let s = unsafe { std::slice::from_raw_parts_mut(self.data, self.size) };
            Some(s)
        }
    }
}

impl Drop for SelfTestResponseSequence {
    fn drop(&mut self) {
        unsafe { diagnostic_msgs__srv__SelfTest_Response__Sequence__fini(self) };
    }
}

unsafe impl Send for SelfTestResponseSequence {}
unsafe impl Sync for SelfTestResponseSequence {}


pub struct SelfTest;

impl ServiceMsg for SelfTest {
    type Request = SelfTestRequest;
    type Response = SelfTestResponse;
    fn type_support() -> *const rcl::rosidl_service_type_support_t {
        unsafe {
            rosidl_typesupport_c__get_service_type_support_handle__diagnostic_msgs__srv__SelfTest()
        }
    }
}

