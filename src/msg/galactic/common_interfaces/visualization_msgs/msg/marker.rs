// This file was automatically generated by ros2msg_to_rs (https://github.com/tier4/ros2msg_to_rs).
use super::*;
use super::super::super::*;
use crate::msg::*;
use crate::rcl;
pub const ARROW: i32 = 0;
pub const CUBE: i32 = 1;
pub const SPHERE: i32 = 2;
pub const CYLINDER: i32 = 3;
pub const LINE_STRIP: i32 = 4;
pub const LINE_LIST: i32 = 5;
pub const CUBE_LIST: i32 = 6;
pub const SPHERE_LIST: i32 = 7;
pub const POINTS: i32 = 8;
pub const TEXT_VIEW_FACING: i32 = 9;
pub const MESH_RESOURCE: i32 = 10;
pub const TRIANGLE_LIST: i32 = 11;
pub const ADD: i32 = 0;
pub const MODIFY: i32 = 0;
pub const DELETE: i32 = 2;
pub const DELETEALL: i32 = 3;

extern "C" {
    fn visualization_msgs__msg__Marker__init(msg: *mut Marker) -> bool;
    fn visualization_msgs__msg__Marker__fini(msg: *mut Marker);
    fn visualization_msgs__msg__Marker__Sequence__init(msg: *mut MarkerSequence, size: usize) -> bool;
    fn visualization_msgs__msg__Marker__Sequence__fini(msg: *mut MarkerSequence);
    fn rosidl_typesupport_c__get_message_type_support_handle__visualization_msgs__msg__Marker() -> *const rcl::rosidl_message_type_support_t;
}


#[repr(C)]
#[derive(Debug)]
pub struct Marker {
    pub header: std_msgs::msg::Header,
    pub ns: crate::msg::RosString<0>,
    pub id: i32,
    pub type_: i32,
    pub action: i32,
    pub pose: geometry_msgs::msg::Pose,
    pub scale: geometry_msgs::msg::Vector3,
    pub color: std_msgs::msg::ColorRGBA,
    pub lifetime: builtin_interfaces__msg__Duration,
    pub frame_locked: bool,
    pub points: geometry_msgs::msg::PointSequence,
    pub colors: std_msgs::msg::ColorRGBASequence,
    pub text: crate::msg::RosString<0>,
    pub mesh_resource: crate::msg::RosString<0>,
    pub mesh_use_embedded_materials: bool,
}

impl Marker {
    pub fn new() -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { visualization_msgs__msg__Marker__init(&mut msg) } {
            Some(msg)
        } else {
            None
        }
    }
}

impl Drop for Marker {
    fn drop(&mut self) {
        unsafe { visualization_msgs__msg__Marker__fini(self) };
    }
}

#[repr(C)]
#[derive(Debug)]
pub struct MarkerSequence {
    data: *mut Marker,
    size: usize,
    capacity: usize,
}

impl MarkerSequence {
    pub fn new(size: usize) -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { visualization_msgs__msg__Marker__Sequence__init(&mut msg, size) } {
            Some(msg)
        } else {
            None
        }
    }

    pub fn as_slice(&self) -> Option<&[Marker]> {
        if self.data.is_null() {
            None
        } else {
            let s = unsafe { std::slice::from_raw_parts(self.data, self.size) };
            Some(s)
        }
    }

    pub fn as_slice_mut(&mut self) -> Option<&mut [Marker]> {
        if self.data.is_null() {
            None
        } else {
            let s = unsafe { std::slice::from_raw_parts_mut(self.data, self.size) };
            Some(s)
        }
    }
}

impl Drop for MarkerSequence {
    fn drop(&mut self) {
        unsafe { visualization_msgs__msg__Marker__Sequence__fini(self) };
    }
}

unsafe impl Send for MarkerSequence {}
unsafe impl Sync for MarkerSequence {}


impl TopicMsg for Marker {
    fn type_support() -> *const rcl::rosidl_message_type_support_t {
        unsafe {
            rosidl_typesupport_c__get_message_type_support_handle__visualization_msgs__msg__Marker()
        }
    }
}
