// This file was automatically generated by ros2msg_to_rs (https://github.com/tier4/ros2msg_to_rs).
use super::super::*;
use super::super::super::*;
use crate::msg::*;
use crate::rcl;
use crate::msg::common_interfaces::*;

extern "C" {
    fn visualization_msgs__srv__GetInteractiveMarkers_Request__init(msg: *mut GetInteractiveMarkersRequest) -> bool;
    fn visualization_msgs__srv__GetInteractiveMarkers_Request__fini(msg: *mut GetInteractiveMarkersRequest);
    fn visualization_msgs__srv__GetInteractiveMarkers_Request__Sequence__init(msg: *mut GetInteractiveMarkersRequestSequence, size: usize) -> bool;
    fn visualization_msgs__srv__GetInteractiveMarkers_Request__Sequence__fini(msg: *mut GetInteractiveMarkersRequestSequence);
    fn visualization_msgs__srv__GetInteractiveMarkers_Response__init(msg: *mut GetInteractiveMarkersResponse) -> bool;
    fn visualization_msgs__srv__GetInteractiveMarkers_Response__fini(msg: *mut GetInteractiveMarkersResponse);
    fn visualization_msgs__srv__GetInteractiveMarkers_Response__Sequence__init(msg: *mut GetInteractiveMarkersResponseSequence, size: usize) -> bool;
    fn visualization_msgs__srv__GetInteractiveMarkers_Response__Sequence__fini(msg: *mut GetInteractiveMarkersResponseSequence);
    fn rosidl_typesupport_c__get_service_type_support_handle__visualization_msgs__srv__GetInteractiveMarkers() -> *const rcl::rosidl_service_type_support_t;
}


#[repr(C)]
#[derive(Debug)]
pub struct GetInteractiveMarkersRequest {
    _unused: u8
}

#[repr(C)]
#[derive(Debug)]
pub struct GetInteractiveMarkersResponse {
    pub sequence_number: u64,
    pub markers: InteractiveMarkerSequence,
}

impl GetInteractiveMarkersRequest {
    pub fn new() -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { visualization_msgs__srv__GetInteractiveMarkers_Request__init(&mut msg) } {
            Some(msg)
        } else {
            None
        }
    }
}

impl Drop for GetInteractiveMarkersRequest {
    fn drop(&mut self) {
        unsafe { visualization_msgs__srv__GetInteractiveMarkers_Request__fini(self) };
    }
}

#[repr(C)]
#[derive(Debug)]
pub struct GetInteractiveMarkersRequestSequence {
    data: *mut GetInteractiveMarkersRequest,
    size: usize,
    capacity: usize,
}

impl GetInteractiveMarkersRequestSequence {
    pub fn new(size: usize) -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { visualization_msgs__srv__GetInteractiveMarkers_Request__Sequence__init(&mut msg, size) } {
            Some(msg)
        } else {
            None
        }
    }

    pub fn as_slice(&self) -> Option<&[GetInteractiveMarkersRequest]> {
        if self.data.is_null() {
            None
        } else {
            let s = unsafe { std::slice::from_raw_parts(self.data, self.size) };
            Some(s)
        }
    }

    pub fn as_slice_mut(&mut self) -> Option<&mut [GetInteractiveMarkersRequest]> {
        if self.data.is_null() {
            None
        } else {
            let s = unsafe { std::slice::from_raw_parts_mut(self.data, self.size) };
            Some(s)
        }
    }
}

impl Drop for GetInteractiveMarkersRequestSequence {
    fn drop(&mut self) {
        unsafe { visualization_msgs__srv__GetInteractiveMarkers_Request__Sequence__fini(self) };
    }
}

unsafe impl Send for GetInteractiveMarkersRequestSequence {}
unsafe impl Sync for GetInteractiveMarkersRequestSequence {}


impl GetInteractiveMarkersResponse {
    pub fn new() -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { visualization_msgs__srv__GetInteractiveMarkers_Response__init(&mut msg) } {
            Some(msg)
        } else {
            None
        }
    }
}

impl Drop for GetInteractiveMarkersResponse {
    fn drop(&mut self) {
        unsafe { visualization_msgs__srv__GetInteractiveMarkers_Response__fini(self) };
    }
}

#[repr(C)]
#[derive(Debug)]
pub struct GetInteractiveMarkersResponseSequence {
    data: *mut GetInteractiveMarkersResponse,
    size: usize,
    capacity: usize,
}

impl GetInteractiveMarkersResponseSequence {
    pub fn new(size: usize) -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { visualization_msgs__srv__GetInteractiveMarkers_Response__Sequence__init(&mut msg, size) } {
            Some(msg)
        } else {
            None
        }
    }

    pub fn as_slice(&self) -> Option<&[GetInteractiveMarkersResponse]> {
        if self.data.is_null() {
            None
        } else {
            let s = unsafe { std::slice::from_raw_parts(self.data, self.size) };
            Some(s)
        }
    }

    pub fn as_slice_mut(&mut self) -> Option<&mut [GetInteractiveMarkersResponse]> {
        if self.data.is_null() {
            None
        } else {
            let s = unsafe { std::slice::from_raw_parts_mut(self.data, self.size) };
            Some(s)
        }
    }
}

impl Drop for GetInteractiveMarkersResponseSequence {
    fn drop(&mut self) {
        unsafe { visualization_msgs__srv__GetInteractiveMarkers_Response__Sequence__fini(self) };
    }
}

unsafe impl Send for GetInteractiveMarkersResponseSequence {}
unsafe impl Sync for GetInteractiveMarkersResponseSequence {}


pub struct GetInteractiveMarkers;

impl ServiceMsg for GetInteractiveMarkers {
    type Request = GetInteractiveMarkersRequest;
    type Response = GetInteractiveMarkersResponse;
    fn type_support() -> *const rcl::rosidl_service_type_support_t {
        unsafe {
            rosidl_typesupport_c__get_service_type_support_handle__visualization_msgs__srv__GetInteractiveMarkers()
        }
    }
}

